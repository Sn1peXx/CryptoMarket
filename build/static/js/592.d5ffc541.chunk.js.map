{"version":3,"file":"static/js/592.d5ffc541.chunk.js","mappings":"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","sources":["Component/CoinChart/CoinRecomended/CoinRec.js","Component/CoinChart/CoinTrade/CoinTrade.js","Component/CoinChart/CoinTrade/CoinTradeContainer.js","Component/CoinChart/CoinChart.js","services/initChart.js","Component/CoinChart/CoinChartContainer.js"],"sourcesContent":["import {NavLink} from \"react-router-dom\";\n\nconst CoinRec = ({id, name, price, symbol, image, priceChange, setCurrentCrypto, timeHandler}) => {\n\n    return (\n        <div className=\"coin-link\">\n            <div  className='coin_cr'>\n                <NavLink className='coin-row coin_cr' to={'/chart'} onClick={() => {\n                    timeHandler(Math.floor(Math.random() * (365 - 355)) + 355)\n                    setCurrentCrypto(id);\n                    window.scrollTo(0, 0);\n                }}>\n                    <div className='coin'>\n                        <img src={image} alt='crypto' width={25} />\n                        <p className=\"coin_name\">{name}</p>\n                        <p className='coin-symbol'>{symbol}</p>\n                    </div>\n                    <div className='coin-data'>\n                        <p className='coin-price'>${price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</p>\n                        {priceChange < 0 ? (\n                            <p className='coin-percent red'>{priceChange.toFixed(2)}%</p>\n                        ) : (\n                            <p className='coin-percent green'>{priceChange.toFixed(2)}%</p>\n                        )}\n                    </div>\n                </NavLink>\n            </div>\n        </div>\n    )\n}\n\nexport default CoinRec;","const CoinTrade = ({\n                       latestPrice,\n                       coinsData,\n                       availableToSell,\n                       buyCurrentCoin,\n                       isBuyVisible,\n                       onChangeOpenOrder,\n                       orderValue,\n                       sellCurrentCoin,\n                       updateOrderHandler,\n                       balance\n                   }) => {\n\n\n    return (\n        <>\n            <div className=\"button_setting\">Оред</div>\n            <div className=\"btn_order_group\">\n                <button onClick={() => onChangeOpenOrder(true)} className=\"btn_order buy_btn\">Купить</button>\n                <button onClick={() => onChangeOpenOrder(false)} className=\"btn_order sell_btn\">Продать</button>\n            </div>\n\n            {isBuyVisible ?\n                <div className=\"order order_buy\">\n                    <p className=\"order_available\">\n                        Доступно: <strong>{balance.toFixed(2) + '$'}</strong>\n                    </p>\n                    <div className=\"order_cost\">\n                        <p className=\"order_price_text\">Цена</p>\n                        <p className=\"order_price_dig\"><span\n                            style={{paddingRight: \"20px\", fontWeight: \"500\"}}>${latestPrice}</span> USDT</p>\n                    </div>\n                    <input className=\"order_input\" id=\"num1\" max={balance} type=\"number\"\n                           value={Number(orderValue).toString()}\n                           onChange={updateOrderHandler}/><span className=\"order_dollar\">$</span>\n                    <br/>\n                    <input className=\"order_range\" type=\"range\" max={balance} value={orderValue}\n                           onChange={updateOrderHandler}/>\n                    <br/>\n                    <button onClick={() => buyCurrentCoin(coinsData.id, orderValue)}\n                            className=\"button_trans_buy\">Купить {coinsData.name}</button>\n                </div>\n\n                :\n\n                <div className=\"order order_sell\">\n                    <p className=\"order_available\">\n                        Доступно: <strong>{availableToSell.toFixed(4)} {coinsData.symbol}</strong>\n                    </p>\n                    <div className=\"order_cost\">\n                        <p className=\"order_price_text\">Цена</p>\n                        <p className=\"order_price_dig\"><span\n                            style={{paddingRight: \"20px\", fontWeight: \"500\"}}>${latestPrice}</span> USDT</p>\n                    </div>\n                    <br/>\n                    <button onClick={() => sellCurrentCoin(coinsData.id)}\n                            className=\"button_trans_sell\">Продать {coinsData.name}</button>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default CoinTrade;","import {connect} from \"react-redux\";\nimport {addNewDeal, addOrder, setNewBalance, setNewArrOrder} from \"../../../Redux/TradeReducer\";\nimport CoinTrade from \"./CoinTrade\";\nimport {useState} from \"react\";\n\n\nconst CoinTradeContainer = (props) => {\n\n    const [orderValue, setOrderValue] = useState(0);\n    const [isBuyVisible, setBuyVisible] = useState(true);\n\n    let availableToSell = 0;\n\n    const onChangeOpenOrder = (status) => {\n        setBuyVisible(status)\n    }\n\n    // Покупка\n    const buyCurrentCoin = (coin, orderValue) => {\n        if (orderValue === 0) {\n            return 0;\n        }\n\n        const dealDate = new Date().toLocaleDateString();\n\n        const dealVolume = orderValue / props.latestPrice;\n        const newBalance = props.balance - orderValue;\n\n        props.addNewDeal(coin, dealVolume);\n        props.addOrder(coin, orderValue, dealVolume, dealDate);\n        props.setNewBalance(newBalance);\n\n        setOrderValue(0);\n    }\n\n    // ПОлучение данных о покупке\n    const updateOrderHandler = ({target}) => {\n\n        let {value, min, max} = target;\n        value = Math.max(Number(min), Math.min(Number(max), Number(value)));\n\n        setOrderValue(value)\n    }\n\n    // Продажа\n    const sellCurrentCoin = (coin) => {\n        const newArr = props.activeDeal.filter(item => {\n\n            if (item.coin !== coin) {\n                return item\n            } else {\n                props.setNewBalance(props.balance + (item.dealVolume * props.latestPrice));\n            }\n\n            calcRestHandler()\n        });\n\n        props.setNewArrOrder(newArr)\n    }\n\n    // Показывает кол-во токенов в наличии\n    const calcRestHandler = () => {\n        props.activeDeal.forEach(item => {\n            if (item.coin === props.coinsData.id) {\n                availableToSell += item.dealVolume\n            }\n        })\n    }\n\n    try {\n        calcRestHandler()\n    } catch(e) {}\n\n\n    return (\n        <CoinTrade\n            coinsData={props.coinsData}\n            latestPrice={props.latestPrice}\n            orderValue={orderValue}\n            isBuyVisible={isBuyVisible}\n            availableToSell={availableToSell}\n            onChangeOpenOrder={onChangeOpenOrder}\n            buyCurrentCoin={buyCurrentCoin}\n            updateOrderHandler={updateOrderHandler}\n            sellCurrentCoin={sellCurrentCoin}\n            balance={props.balance}\n        />\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        balance: state.TradePage.balance,\n        activeDeal: state.TradePage.activeDeal\n    }\n}\n\nexport default connect(mapStateToProps, {addOrder, addNewDeal, setNewBalance, setNewArrOrder})(CoinTradeContainer);","import CoinRec from \"./CoinRecomended/CoinRec\";\nimport CoinTradeContainer from \"./CoinTrade/CoinTradeContainer\";\n\nimport './CoinPage.css';\n\nconst CoinChart = ({latestPrice, coinsData, setTimeframe, coins, setCurrentCrypto}) => {\n\n    const offerCoins = coins.slice(5, 14);\n\n    let changePerDay = coinsData.market_data.price_change_percentage_24h;\n\n    const buttonsArr = [\n        {label: '1 День', data: 1},\n        {label: '3 Дня', data: 3},\n        {label: '1 Неделя', data: 7},\n        {label: '1 Месяц', data: 30},\n        {label: '6 Месяцев', data: 182},\n        {label: '1 Год', data: 365}\n    ];\n\n    const buttons = buttonsArr.map(({label, data}) => {\n        return (\n            <button type=\"button\" className=\"button_chart btn first\" key={data}\n                    onClick={() => setTimeframe(data)}>{label}</button>\n        )\n    });\n\n    const timeHandler = (time) => {\n        setTimeframe(time)\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"coin_page\">\n                    <div className=\"crypto_info\">\n                        <img src={coinsData.image.large} alt=\"\" width={50}/>\n                        <h2 className='name_coin'>{coinsData.name} </h2> <span className=\"text_coin\"> цена </span>\n                        <strong\n                            className=\"price_coin\">${latestPrice.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</strong>\n                    </div>\n                    <div className=\"day_change_coin\"><span className=\"change_text\">Изменение за день</span>\n                        {changePerDay < 0 ? (\n                            <p className='coin-percent coin_per red'>{changePerDay.toFixed(2)}%</p>\n                        ) : (\n                            <p className='coin-percent coin_per green'>{changePerDay.toFixed(2)}%</p>\n                        )}\n                    </div>\n                    <div id='chart' className='p-0 m-0'/>\n                </div>\n                <div className=\"coin_group\">\n                    <div className=\"coin_left\">\n                        <h4 className=\"button_setting\">Настройки ТФ</h4>\n                        <div className=\"button_group_time\">\n                            {buttons}\n                        </div>\n\n                        <CoinTradeContainer\n                            coinsData={coinsData}\n                            latestPrice={latestPrice}\n                        />\n\n                    </div>\n\n                    <div className=\"coin_right\">\n                        <h4 className=\"button_setting\">Часто просматриваемые</h4>\n                        {offerCoins.map(coin => {\n                            return (\n                                <CoinRec\n                                    key={coin.id}\n                                    id={coin.id}\n                                    name={coin.name}\n                                    price={coin.current_price}\n                                    symbol={coin.symbol}\n                                    volume={coin.market_cap}\n                                    image={coin.image}\n                                    priceChange={coin.price_change_percentage_24h}\n                                    coin={coin}\n                                    setCurrentCrypto={setCurrentCrypto}\n                                    timeHandler={timeHandler}\n                                />\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default CoinChart;","import Plotly from 'plotly.js-dist-min'\n\nconst initChart = (data) => {\n    let trace_price = {\n        name: \"Price ($)\",\n        x: data.index.map((t) => new Date(t)),\n        y: data.price,\n        xaxis: \"x\",\n        yaxis: \"y\",\n        type: \"scatter\",\n        mode: \"lines\",\n        marker: { color: \"black\", size: 2 },\n    };\n    let trace_volumes = {\n        name: \"Volumne ($B)\",\n        x: data.index.map((t) => new Date(t)),\n        y: data.volumes,\n        xaxis: \"x\",\n        yaxis: \"y2\",\n        type: \"bar\",\n        barmode: \"relative\",\n        marker: {\n            color: \"rgb(49,130,189)\",\n            opacity: 0.7,\n        },\n    };\n    let layout = {\n        autosize: false,\n        height: 700,\n        width: 1170,\n        margin: {\n            l: 50,\n            r: 20,\n            t: 35,\n            pad: 3,\n        },\n        hovermode: \"x unified\",\n        showlegend: false,\n        xaxis : {\n            fixedrange: true,\n            showspikes: true,\n            domain: [1, 1],\n            anchor: \"y2\",\n        },\n        yaxis: {\n            fixedrange: true,\n            domain: [0.1, 1],\n            anchor: \"x\",\n        },\n        yaxis2: {\n            showticklabels: false,\n            domain: [0, 0.1],\n            anchor: \"x\",\n        },\n        grid: {\n            roworder: \"bottom to top\",\n        },\n    };\n\n    let config = { responsive: false, displayModeBar: false };\n    let series = [trace_price, trace_volumes];\n    Plotly.newPlot(\"chart\", series, layout, config);\n};\n\nexport default initChart;","import {API} from \"../../API/api\";\nimport {useEffect, useState} from \"react\";\nimport {connect} from \"react-redux\";\n\nimport CoinChart from \"./CoinChart\";\nimport initChart from \"../../services/initChart\";\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport {getTenCoins, setCurrentCrypto} from \"../../Redux/CoinListReducer\";\nimport {Redirect} from \"react-router-dom\";\n\n\nconst CoinChartContainer = (props) => {\n\n    const [latestPrice, setLatestPrice] = useState(0);\n    const [coinsData, setCoinsData] = useState([]);\n    const [isFetching, setFetching] = useState(true);\n    const [timeframe, setTimeframe] = useState(365);\n\n    const fetchData = async () => {\n        let data = { index: [], price: [], volumes: [] };\n        let result = await API.getChartCoin(props.selectCrypto, timeframe);\n        for (const item of result.prices) {\n            data.index.push(item[0]);\n            data.price.push(item[1]);\n        }\n        for (const item of result.total_volumes) data.volumes.push(item[1]);\n\n        return data;\n    };\n\n    useEffect(() => {\n        fetchData().then((chartData) => {\n            initChart(chartData);\n            setLatestPrice(parseFloat(chartData.price[chartData.price.length - 1]).toFixed(2));\n        });\n\n        API.getExactCoin(props.selectCrypto)\n            .then(res => {\n                setCoinsData(res.data);\n                setFetching(false);\n            })\n            .catch(e => console.error(e));\n\n    }, [timeframe]);\n\n    useEffect(() => {\n        props.getTenCoins();\n    }, []);\n\n\n    const element = document.querySelector(\"#chart\");\n\n    if (!JSON.parse(localStorage.getItem(\"user\"))) {\n        return <Redirect to={\"/login\"} />\n    }\n\n    return (\n        <>\n            {isFetching && !(typeof(element) != 'undefined' && element != null)\n                ? <Preloader />\n                : <>\n                    <CoinChart\n                        coins={props.coins}\n                        setCurrentCrypto={props.setCurrentCrypto}\n                        selectCrypto={props.selectCrypto}\n                        latestPrice={latestPrice}\n                        coinsData={coinsData}\n                        setTimeframe={setTimeframe}\n                    />\n                 </>\n            }\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectCrypto: state.CoinListPage.selectCrypto,\n        coins: state.CoinListPage.coins,\n    }\n}\n\nexport default connect(mapStateToProps, {getTenCoins, setCurrentCrypto})(CoinChartContainer);"],"names":["id","name","price","symbol","image","priceChange","setCurrentCrypto","timeHandler","className","to","onClick","Math","floor","random","window","scrollTo","src","alt","width","toString","replace","toFixed","latestPrice","coinsData","availableToSell","buyCurrentCoin","isBuyVisible","onChangeOpenOrder","orderValue","sellCurrentCoin","updateOrderHandler","balance","style","paddingRight","fontWeight","max","type","value","Number","onChange","connect","state","TradePage","activeDeal","addOrder","addNewDeal","setNewBalance","setNewArrOrder","props","useState","setOrderValue","setBuyVisible","calcRestHandler","forEach","item","coin","dealVolume","e","status","dealDate","Date","toLocaleDateString","newBalance","target","min","newArr","filter","setTimeframe","coins","offerCoins","slice","changePerDay","market_data","price_change_percentage_24h","buttons","label","data","map","time","large","current_price","volume","market_cap","series","x","index","t","y","xaxis","yaxis","mode","marker","color","size","volumes","barmode","opacity","Plotly","autosize","height","margin","l","r","pad","hovermode","showlegend","fixedrange","showspikes","domain","anchor","yaxis2","showticklabels","grid","roworder","responsive","displayModeBar","selectCrypto","CoinListPage","getTenCoins","setLatestPrice","setCoinsData","isFetching","setFetching","timeframe","fetchData","API","result","prices","push","total_volumes","useEffect","then","chartData","initChart","parseFloat","length","res","catch","console","error","element","document","querySelector","JSON","parse","localStorage","getItem","Preloader"],"sourceRoot":""}